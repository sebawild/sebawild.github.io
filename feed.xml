<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sebastian Wild's Site</title>
    <description>Website of Sebastian Wild, algorithms researcher
</description>
    <link>https://www.wild-inter.net/</link>
    <atom:link href="https://www.wild-inter.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 28 Sep 2022 15:33:47 +0100</pubDate>
    <lastBuildDate>Wed, 28 Sep 2022 15:33:47 +0100</lastBuildDate>
    <generator>Jekyll v4.2.1</generator>
    
      <item>
        <title>Increase the number of recent folders in Thunderbird</title>
        <description>&lt;p&gt;Showing more than 15 recent folders in move-to and copy-to context menus is easy in Thunderbird 91.&lt;/p&gt;

&lt;p&gt;I’m a heavy user of many IMAP folders for organizing email (and Günter Gersdorf’s brilliant Thunderbird extension
&lt;a href=&quot;https://www.ggbs.de/extensions/CopySent2Current.html&quot;&gt;Copy Sent to Current&lt;/a&gt;), moving emails to folders quickly is important.&lt;/p&gt;

&lt;p&gt;Thunderbird long has remembered which folders were used most recently, offering to move or copy mails there in a separate menu, but the default number of folders shown there was a miserly 15 folders.
Previously, increasing that number required a rather &lt;a href=&quot;http://forums.mozillazine.org/viewtopic.php?f=28&amp;amp;t=2710625&quot;&gt;hidden hack&lt;/a&gt;,
but in the latest version of Thunderbird (91 at the time of writing), it is easy:&lt;/p&gt;

&lt;p&gt;Simply open the “Config Editor” in the preferences, and change the key &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mail.folder_widget.max_recent&lt;/code&gt;	to your preferred value; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;40&lt;/code&gt; for me.&lt;/p&gt;
</description>
        <pubDate>Thu, 27 Jan 2022 00:00:00 +0000</pubDate>
        <link>https://www.wild-inter.net/posts/number-recent-folders-thunderbird</link>
        <guid isPermaLink="true">https://www.wild-inter.net/posts/number-recent-folders-thunderbird</guid>
        
        
        <category>web</category>
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>How to move your lecture online &amp;ndash; in little time</title>
        <description>&lt;p&gt;I describe my solution for online lecturing amid the COVID-19 crisis
using youtube livestreams and PINGO.&lt;/p&gt;

&lt;p&gt;Although I kind of saw it coming 
after reading this &lt;a href=&quot;https://medium.com/@tomaspueyo/coronavirus-act-today-or-people-will-die-f4d3d9cd99ca&quot;&gt;excellent data analysis&lt;/a&gt; 
(on March 12, before things got really crazy),
things did get hectic:
The official decision of University of Liverpool to move all
face-to-face classes online with &lt;em&gt;immediate effect&lt;/em&gt; came
on Saturday evening (March 14), with my class due on Monday, March 16.
So what follows is not the well-thought out, technically sophisticated
and educationally up-to-date mode of online teaching I (and you) might dream of,
but it is what allowed me to deliver an (according to isolated feedback) effective 
online lecture with less than one day of prep time.&lt;/p&gt;

&lt;h2 id=&quot;where-i-started-good-old-screencasts-&quot;&gt;Where I started: Good old screencasts …&lt;/h2&gt;

&lt;p&gt;I have been recording screencasts of my lectures for &lt;a href=&quot;/teaching/comp526&quot;&gt;COMP526&lt;/a&gt;
and posting them on youtube all term.
The methodology for that (on Ubuntu) is basically still as described
&lt;a href=&quot;/teaching/advanced-algorithms/#technical-details&quot;&gt;here&lt;/a&gt;, only with an
update of my laptop (now an HP Elitebook x360) and &lt;a href=&quot;https://github.com/xournalpp/xournalpp&quot;&gt;Xournal++&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So a reasonable mic, 
screencasting software (&lt;a href=&quot;https://www.maartenbaert.be/simplescreenrecorder/&quot;&gt;SimpleScreenRecorder&lt;/a&gt;)
and a &lt;a href=&quot;/teaching/comp526#syllabus&quot;&gt;website&lt;/a&gt; to post videos and lecture notes were already set up.&lt;/p&gt;

&lt;h2 id=&quot;-and-in-class-formative-assessments-aka-clicker-questions&quot;&gt;… and in-class formative assessments (aka clicker questions)&lt;/h2&gt;

&lt;p&gt;What I also came to like as an effective tool, is an in-class 
response system to quickly ask for opinions, prior knowledge,
to recap definitions, and to test understanding.
(I have been using &lt;a href=&quot;http://trypingo.com/&quot;&gt;PINGO&lt;/a&gt; for that.)&lt;/p&gt;

&lt;p&gt;So my initial contingency plan was to record the lectures at home
and upload them. But what was missing, was a way to 
keep the clicker questions;
and – I know how these things go first hand –
I was afraid that had there been no incentive for students to keep 
on track with watching the videos, it all too easily happens that some 
fall behind.&lt;/p&gt;

&lt;p&gt;I was determined to not let that happen (quite so easily).&lt;/p&gt;

&lt;h2 id=&quot;going-live&quot;&gt;Going live!&lt;/h2&gt;

&lt;p&gt;My solution was to use youtube livestreams for the lectures;
how to do that is explained below.
That way, we (the students and myself that is) would be seeing the same screen
(almost – more on that later) in real time, and I could simply continue 
with the clicker questions.&lt;/p&gt;

&lt;p&gt;Youtube also has a “live chat” that offers a (limited) backchannel for
students to ask questions (which quite a few did!), signal technical problems 
(none yet, luckily!), or give a quick “hands” on who is still following.&lt;/p&gt;

&lt;h3 id=&quot;quick-how-to-for-youtube-livestreams&quot;&gt;Quick how-to for youtube livestreams&lt;/h3&gt;

&lt;p&gt;(Here is &lt;a href=&quot;https://support.google.com/youtube/answer/2474026?hl=en&amp;amp;ref_topic=9257984&quot;&gt;youtube’s detailed manual&lt;/a&gt; on that;
you want the “encoder streaming”.)&lt;/p&gt;

&lt;p&gt;After signing into your youtube account, click on CREATE → Go Live (top right).
There you pick “Stream” (the middle tab at the top).
I did change the defaults, except for setting the stream latency to “ultra low”.
In the top right, you can get a link that you can share with students even ahead of time.&lt;/p&gt;

&lt;p&gt;Now, to stream your screen content (or part of it), you need an &lt;em&gt;encoder&lt;/em&gt;.
I had good experiences with SimpleScreenRecorder, and indeed you can use it for this, too.
The screenshot below shows the settings I used; what goes into the “Save as” box
is shown in the youtube stream settings as “Stream URL” and “Stream key”;
the entry simply is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Stream URL&amp;gt;/&amp;lt;Stream key&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Selecting AAC as audio codec is vital!&lt;/strong&gt; The mp3 encoder (selected by default) does 
&lt;em&gt;not&lt;/em&gt; work with youtube, but the error messages don’t tell you that.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;/assets/simplescreenrecorder-youtube.png&quot; /&gt;
&lt;caption&gt;
	Settings for streaming to youtube.
&lt;/caption&gt;
&lt;/figure&gt;

&lt;p&gt;Then you click Continue and simple start your recording.
The youtube stream settings site should now show your screen content (with a few seconds delay).&lt;/p&gt;

&lt;p&gt;Clicking on “GO LIVE” (top right) starts the actual livestream.&lt;/p&gt;

&lt;p&gt;On my (fairly new) laptop, downscaling the 4K display to 1080p and encoding
as x264 did put considerable load on the machine, 
but I did not experience severe problems, so I did not try to play with the
encoder settings at all.
Your mileage may vary.&lt;/p&gt;

&lt;p&gt;As for all youtube videos, you can configure the visibility of the stream as “unlisted”, 
then only students with the link can view the video, but no-one can find it through search;
“public” videos appear in searches.
If you choose “private”, people have to be signed in, and I did not want to force students to do that.&lt;/p&gt;

&lt;h3 id=&quot;phone-for-backchannel&quot;&gt;Phone for backchannel&lt;/h3&gt;

&lt;p&gt;During the lecture, I kept the youtube app on my Android open to see
messages coming on the live chat. 
(This is also a great way to test if your stream works.)&lt;/p&gt;

&lt;h3 id=&quot;aftermath&quot;&gt;Aftermath&lt;/h3&gt;

&lt;p&gt;For consistency, I split the recorded livestream into individual
videos for each subsection, using the youtube studio editor, but also
keep the livestream itself (as an unlisted video).
(Pretend to trim the live stream, but then instead of “SAVE” click the 
three dots and “SAVE AS NEW”).
The nicely cut videos are then linked to from my course website, e.g.,
&lt;a href=&quot;/teaching/comp526/07-compression#material&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cutting videos takes a few extra minutes that I did not need
when locally recording in class, where I could easily start a new recording 
with one click. But it makes the recordings much easier to navigate and
use later on.&lt;/p&gt;

&lt;h2 id=&quot;first-impressions&quot;&gt;First impressions&lt;/h2&gt;

&lt;p&gt;After using this setup for 3 hours of lectures, I am overall fairly happy.
It does not cost much more preparation for me (although a bit extra time for cutting videos) 
and is clearly superior to only uploading videos.
The livestream always had well below 10s of delay, which is totally fine
for the interactive questions, and sound and video quality are excellent.&lt;/p&gt;

&lt;p&gt;Compared to (my experiences with) video conferencing solutions 
Cisco WebEx, Skype, and Microsoft Teams, the stream is clearly superior
in quality and stability, and the resulting recordings are essentially
indistinguishable from the ones I recorded in face-to-face lectures.&lt;/p&gt;

&lt;p&gt;A clear downside of my approach is the missing instant feedback 
from looking around the audience’s faces. (I usually have 30-50 students 
in class, so this was very doable.)
I used to look around for this instant feedback very frequently –
I’m lecturing facing the audience in the lecture rooms –
so there is no way to replace this with the same number of PINGO questions.&lt;/p&gt;

&lt;p&gt;Ideally, I’d like to have an additional (informal, anonymous) 
“quick-emotions” backchannel with buzzers for “I’m lost”, “I got it”,
and “I need a break” (or so) that students could continuously push 
(as opposed to questions I have to trigger).
So far, I have not found a service for that.&lt;/p&gt;

</description>
        <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
        <link>https://www.wild-inter.net/posts/youtube-livestream-lectures</link>
        <guid isPermaLink="true">https://www.wild-inter.net/posts/youtube-livestream-lectures</guid>
        
        
        <category>teaching</category>
        
        <category>web</category>
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Install pdf2htmlEX on recent Ubuntu</title>
        <description>&lt;p&gt;Because of unresolved dependencies, installing pdf2htmlEX became
challenging in recent Ubuntu.&lt;/p&gt;

&lt;h3 id=&quot;update-2022-09&quot;&gt;&lt;strong&gt;Update&lt;/strong&gt; [2022-09]&lt;/h3&gt;

&lt;p&gt;Much of the complication below can now be avoided! 
A few developers – worthy of our collective Thanks! – revived
pdf2htmlEX and ported it to new versions of poppler and fontforge.
Their effort lives on https://pdf2htmlex.github.io/pdf2htmlEX/ and they offer
various prepackaged &lt;a href=&quot;https://github.com/pdf2htmlEX/pdf2htmlEX/releases&quot;&gt;releases&lt;/a&gt;,
including AppImages.&lt;/p&gt;

&lt;h2 id=&quot;pdf2htmlex-in-docker&quot;&gt;pdf2htmlEX in docker&lt;/h2&gt;

&lt;p&gt;I use pdf2htmlEX to make &lt;a href=&quot;pdf2htmlex&quot;&gt;pdfs nicely readable in the browser&lt;/a&gt;.
pdf2htmlEX relies on a custom version of the poppler library, and
support for more recent versions of poppler has not been built into it yet.
Since no new maintainer has been found, people started to look for alternatives
to keep using pdf2htmlEX productively, without being forced to stay on
old libraries systemwide.
Docker containers are a solution for precisely such use cases.&lt;/p&gt;

&lt;p&gt;I here describe the steps that it took me to get pdf2htmlEX running on
Ubuntu 18.04.1 LTS; I was fine with a certain overhead (in time and space)
for running it, but I wanted direct command-line interaction on individual
files. Since docker containers are isolated from the host system, this requires
some extra steps.&lt;/p&gt;

&lt;p&gt;First install docker; I used the snap version, so I ran:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;snap install docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, I pulled the prepackaged docker container by
&lt;a href=&quot;https://hub.docker.com/r/bwits/pdf2htmlex&quot;&gt;bwits&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo docker pull bwits/pdf2htmlex
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For running pdf2htmlEX conveniently and (somewhat) securely,
you should be able to run docker as user;
this is not possible directly since docker uses Unix sockets owned by root
for communicating with containers.
But if you create a group &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; and add yourself to it,
the socket will be &lt;a href=&quot;https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user&quot;&gt;owned by that group&lt;/a&gt; instead.
So:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo groupadd docker
sudo usermod -aG docker $USER
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You probably have to reboot (log out and restart the docker daemon) before
this takes effect, you can test it with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker run hello-world&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If everything worked out, we can now run pdf2htmlEX as&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -ti --rm -v `pwd`:/pdf bwits/pdf2htmlex pdf2htmlEX [args] file.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to convert &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.pdf&lt;/code&gt; in the current working directory.
Note that the application inside the container only gets access to the
the folder you map to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/pdf&lt;/code&gt; using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt; option,
i.e., in the above command the current directory.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Jan 2019 00:00:00 +0000</pubDate>
        <link>https://www.wild-inter.net/posts/pdf2htmlEX-on-docker</link>
        <guid isPermaLink="true">https://www.wild-inter.net/posts/pdf2htmlEX-on-docker</guid>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>Why DOIs Rule</title>
        <description>&lt;p&gt;DOIs (digital object identifiers) are much more than a unique id for
scientific papers.&lt;/p&gt;

&lt;p&gt;Making the style for bibliographies consistent probably ranks among the
least favorite tasks of researchers who would like to disseminate their
findings.
Thanks to LaTeX and BibTeX, the task of citing other research
is mostly reduced to curating a high-quality &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bib&lt;/code&gt;-file of references.&lt;/p&gt;

&lt;p&gt;But that shifts the problem to getting high-quality bib entries!
My experiences with publisher-provided bib-entries and services like Google Scholar
were very mixed – most required manual tweaking (and double checking!) of the entries.&lt;/p&gt;

&lt;p&gt;This should be much easier. All it needs is a
well-curated data base of metadata for scientific research
(maintained by those who care for consistency: the publishers!),
but with a machine-readable well-defined interface to be used by some
tool created by someone who
understands BibTeX well (it seems, this is rather not the publishers strength …).&lt;/p&gt;

&lt;p&gt;Luckily, both exists!
DOIs (digital object identifiers) are not just an id for papers,
they also serve as keys in exactly such a data base.
And with &lt;a href=&quot;https://doi2bib.org&quot;&gt;doi2bib.org&lt;/a&gt;, there is a service that
produces high-quality bib-entries from a doi.&lt;/p&gt;

&lt;p&gt;This brings us one step closer to a system, in which
the TeX source would only give the DOI and everything else is taken care of
automatically
(retaining the option for manual tweaking as with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bbl&lt;/code&gt; files of BibTeX).&lt;/p&gt;

&lt;h2 id=&quot;update-nothing-is-infallible&quot;&gt;Update: Nothing is infallible&lt;/h2&gt;

&lt;p&gt;I found a case where I was not happy with the result of doi2bib:
For papers in Springer journals that first appear online and later in
the printed journal, doi2bib mixes the two entries. 
Month and year of publication are set to the first online version,
but volume and issue number are also filled in, so that the resulting
bib entry looks as if the printed issue appeared earlier.
This is confusing, I would rather use only the final printed information,
and ended up manually adapting the bib files.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Jul 2018 00:00:00 +0100</pubDate>
        <link>https://www.wild-inter.net/posts/why-dois-rule</link>
        <guid isPermaLink="true">https://www.wild-inter.net/posts/why-dois-rule</guid>
        
        
        <category>web</category>
        
        <category>publishing</category>
        
      </item>
    
      <item>
        <title>Making pdfs efficiently readable on the web</title>
        <description>&lt;p&gt;My experiments with pdf2htmlEX for this site.&lt;/p&gt;

&lt;h2 id=&quot;where-we-are&quot;&gt;Where we are&lt;/h2&gt;

&lt;p&gt;Scientific papers are distributed as &lt;em&gt;pdfs&lt;/em&gt;—Adobe’s
“portable document format” intended to decribe
exactly how something looks in print.
This might be a little silly, given that many articles
are never really printed, but it is the de facto standard.
And mere fact that we call articles “papers” might
indicate that (the abstraction of) physical sheets of paper
might remain with us for an indefinite period.&lt;/p&gt;

&lt;p&gt;There are innovative attempts (e.g. &lt;a href=&quot;https://www.pubpub.org/&quot;&gt;pubpub&lt;/a&gt;)
that have taken up the challenge to establish
entirely new formats to disseminate knowledge.
One goal is to make it easier to generate not-for-print formats.&lt;/p&gt;

&lt;p&gt;Also the big publishers make attempts to generate html versions of papers,
e.g, &lt;a href=&quot;http://dx.doi.org/10.1007/s00453-017-0392-3&quot;&gt;here&lt;/a&gt; (paywalled, sorry).
This works reasonably well, but probably involves some manual tweaking
and occasionally yields quite suboptimal results.
In the above example, check out
&lt;a href=&quot;https://link.springer.com/article/10.1007%2Fs00453-017-0392-3#FPar29&quot;&gt;Algorithm 3&lt;/a&gt; (ugly rasterized picture) or my manually adapted enumerate-list at the beginning of
&lt;a href=&quot;https://link.springer.com/article/10.1007%2Fs00453-017-0392-3#Sec2&quot;&gt;Section 1.1&lt;/a&gt; (missing space between (G1) and text).&lt;/p&gt;

&lt;p&gt;While my points of critique might be minor / overly picky, that paper is actually a
simple example. It does, e.g., not use hand-TikZed new math symbols or
inline pictures.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Who would use something silly as &lt;a href=&quot;/publications/html/wild-2010.pdf.html#pf16&quot;&gt;that&lt;/a&gt;?&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;Well, there are &lt;a href=&quot;../concrete-mathematics-domino-formulas.jpg&quot;&gt;well-known examples&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;(In case you don’t recognize by the font which book this page is from,
chances are you will not care about my nickpicks above, either.)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Moreover, I do not want to invest manual effort in generating html versions
of my preprints.&lt;/p&gt;

&lt;h2 id=&quot;what-i-wanted&quot;&gt;What I wanted&lt;/h2&gt;

&lt;p&gt;Let’s face it: we are stuck with pdfs as the main exchange format,
and automatic conversions that truely change the layout will always have glitches.
Besides, I &lt;em&gt;like&lt;/em&gt; the fixed layout and stable pages.
So while I have been posting preprint pdfs on my website ever since
I have been publishing papers, I have been wondering if there is a
better alternative.&lt;/p&gt;

&lt;p&gt;What I want is a simple and robust way to render pdfs in the browser.
There are different options.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Plugins: not always available, security flaws …&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mozilla/pdf.js&quot;&gt;Javascript libraries&lt;/a&gt; that implement
a full pdf viewer: thanks to massive improvements in javascript engines reasonably efficient, but it is clumsy to &lt;em&gt;link into&lt;/em&gt; a pdf.&lt;/li&gt;
  &lt;li&gt;using some webservice for pdf viewing (e.g &lt;a href=&quot;https://www.scribd.com/&quot;&gt;scripd&lt;/a&gt;):
apart from having to entrust your content to and relying on the service of some company,
it is unclear whether uploading preprints there would still fall under the
author’s website exception.
(see, e.g., the policy for &lt;a href=&quot;http://www.sherpa.ac.uk/romeo/search.php?source=journal&amp;amp;sourceid=26608&amp;amp;la=en&quot;&gt;Springer LNCS&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;(statically) convert pdf to html: until recently, I thought the result would be unacceptably far from the original pdf, but this has changed!&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-solution-pdf2htmlex&quot;&gt;The solution: pdf2htmlEX&lt;/h2&gt;

&lt;p&gt;By using embedded fonts and HTML 5 typography features, &lt;a href=&quot;https://github.com/coolwanglu/pdf2htmlEX&quot;&gt;pdf2htmlEX&lt;/a&gt; achieves remarkable results.
It statically &lt;em&gt;converts&lt;/em&gt; a pdf to html—it is not a viewer;
the original pdf is not needed afterwards.&lt;/p&gt;

&lt;p&gt;What works out of the box:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The html pages look almost identical to the original pdf,&lt;/li&gt;
  &lt;li&gt;they are searchable,&lt;/li&gt;
  &lt;li&gt;links are clickable (both within the pdf and to external pages), and&lt;/li&gt;
  &lt;li&gt;we can use plain html anchor links to link to any specific page within the pdf.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that pdf2htmlEX is no longer maintained, and there seems to be no simple
solution to run it under a current Ubuntu (18.04);
however, &lt;a href=&quot;pdf2htmlEX-on-docker&quot;&gt;I got it running in a &lt;em&gt;docker container&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;configuration&quot;&gt;Configuration&lt;/h3&gt;

&lt;p&gt;The default of pdf2htmlEX is to produce one big html file with all needed resources
inlined.
This is convenient, but does not work well for documents with more than 20 pages.&lt;/p&gt;

&lt;p&gt;However, pdf2htmlEX also allows to split the resulting html into one file per pdf page,
which are loaded dynamically via AJAX.
That way, even large files like my &lt;a href=&quot;/publications/html/wild-2016.pdf.html&quot;&gt;dissertation&lt;/a&gt;
are opened in an instant, and missing pages are rendered very fast.
(pdf.js might be an edge faster).&lt;/p&gt;

&lt;p&gt;The dynamic loading comes at a price though: Searching the text (via the browser) does no longer work!
It works fine for the currently rendered part, but of course not for the rest of the document.&lt;/p&gt;

&lt;p&gt;pdf2htmlEX has further options on which other parts to embed; I chose
to keep everything in extra files that would be shared by several papers.
The final call uses the following options:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pdf2htmlEX --data-dir &amp;lt;my-data-dir&amp;gt; --embed-css 0 --embed-javascript 0 --embed-image 1 --fit-width 1000 --split-pages 1 --page-filename paper-%d.page paper.pdf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;my-additions-to-the-ui&quot;&gt;My additions to the UI&lt;/h3&gt;

&lt;p&gt;By default, pdf2htmlEX generates a sidebar with the pdf outline.
While generally a useful feature, it was annoying that there was no way to hide it
when you would rather have the full window  width for content.&lt;/p&gt;

&lt;p&gt;I therefore hacked a few additional keyboard shortcuts into the javascript file;
here is the overall list of available commands:&lt;/p&gt;

&lt;h4 id=&quot;keyboard-shortcuts-in-pdf2htmlex&quot;&gt;Keyboard Shortcuts in pdf2htmlEX&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Shortcut&lt;/th&gt;
      &lt;th&gt;Function&lt;/th&gt;
      &lt;th&gt;Comment&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+&lt;/code&gt;,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;zoom in&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;zoom out&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;reset view&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;o&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;toggle outline&lt;/td&gt;
      &lt;td&gt;only in my version&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;F&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;fit to width&lt;/td&gt;
      &lt;td&gt;only in my version&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;P&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;fit to page height&lt;/td&gt;
      &lt;td&gt;only in my version&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;G&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;go to page&lt;/td&gt;
      &lt;td&gt;only in my version&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;It really is a hack at this moment, but in case you would like to use it, you can do by the following procedure:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Copy pdf2htmlEX’s data dir to some convenient location;
under Linux it would by found in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/use/share/pdf2htmlEX&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Replace the shipped pdf2htmlEX.min.js with &lt;a href=&quot;/publications/html/pdf2htmlEX.min.js&quot;&gt;my version&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Specify a custom data dir when calling pdf2htmlEX.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;remaining-glitches&quot;&gt;Remaining glitches&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Searching within the full document does not work with dynamically rendered pages.&lt;/li&gt;
  &lt;li&gt;Searching does not properly work with ligatures.
(pdf2htmlEX can remove them, but I would rather not.)&lt;/li&gt;
  &lt;li&gt;Small spacing issues with some characters (e.g. square brackets).
Might be improved with manual hinting of the fonts.&lt;/li&gt;
  &lt;li&gt;UI is still rudimentary&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 13 May 2018 00:00:00 +0100</pubDate>
        <link>https://www.wild-inter.net/posts/pdf2htmlex</link>
        <guid isPermaLink="true">https://www.wild-inter.net/posts/pdf2htmlex</guid>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Ingenious mechanical explanations of math facts</title>
        <description>&lt;p&gt;Creative mechanical devices can demonstrate abstract facts in a most
memorable way.&lt;/p&gt;

&lt;p&gt;Paraphrasing &lt;a href=&quot;https://en.wikiquote.org/wiki/John_von_Neumann&quot;&gt;John von Neumann&lt;/a&gt;,
math is not understood, but we get used to it.
That seems sadly true for some aspects of math, but we should not let this quote become
a justification for not looking for better ways to internalize and explain mathematical
concepts.&lt;/p&gt;

&lt;p&gt;One such way that has always been particularly appealing to myself
are mechanical devices that make abstract processes visible.&lt;/p&gt;

&lt;h2 id=&quot;the-bean-machinepebbles-into-bins&quot;&gt;The Bean Machine—pebbles into bins&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Bean_machine&quot;&gt;bean machine&lt;/a&gt; or
&lt;a href=&quot;https://en.wikipedia.org/wiki/Francis_Galton&quot;&gt;Galton&lt;/a&gt; machine
illustrates the Binomial distribution in a very hands-on way.
Watch the &lt;a href=&quot;https://en.wikipedia.org/wiki/File:Galton_box.webm&quot;&gt;video on Wikipedia&lt;/a&gt;;
that says more than any explanation I could give here.&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Mar 2018 00:00:00 +0000</pubDate>
        <link>https://www.wild-inter.net/posts/bean-machine</link>
        <guid isPermaLink="true">https://www.wild-inter.net/posts/bean-machine</guid>
        
        
        <category>math</category>
        
      </item>
    
      <item>
        <title>Quick animations from slides for youtube</title>
        <description>&lt;p&gt;Quick animations from slides for youtube.&lt;/p&gt;

&lt;p&gt;Some things are better shown in motion. Full stop.
In a paper, you can only present still images, but linking
a youtube video with a supplemental animation is certainly
an acceptable option nowadays.&lt;/p&gt;

&lt;p&gt;So I created a quick and dirty animation from slides I had prepared
already a while ago.
The result is puristic (no audio comment, no fine tuning),
but I managed to get it in less than 40 min effort,
including some trial and error and uploads.&lt;/p&gt;

&lt;p&gt;So here’s the three simple steps to create a quick-and-dirty animation from
you existing (pdf) slides.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pdftk slides.pdf burst
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To split into pages.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for x in pg*pdf
do
    convert -density 400 $x &quot;${x%pdf}png&quot;
done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create raster images using imagemagick; density adjusts the resolution.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mencoder mf://*.png -mf fps=1:type=png -ovc copy -oac copy -o output.avi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create video with one slide per second; adjust fps if not appropriate&lt;/p&gt;

&lt;p&gt;Check out my
&lt;a href=&quot;https://www.youtube.com/watch?v=yi6syj9nksk&quot;&gt;result on youtube&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For embedding the animation in a website, a gif image might be more
handy; that is just another command away:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;convert -geometry 40% -delay 100 -loop 0 pg*png output.gif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-loop 0&lt;/code&gt; means infinitly repeat loop, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-delay 100&lt;/code&gt; is a 1 second delay
(as we used it for the video above). The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-geometry 40%&lt;/code&gt; is optional,
but for most applications, the gif should be a substantially smaller file,
so reducing the resolution is a good idea here.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Apr 2017 00:00:00 +0100</pubDate>
        <link>https://www.wild-inter.net/posts/youtube-slide-animation</link>
        <guid isPermaLink="true">https://www.wild-inter.net/posts/youtube-slide-animation</guid>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Git for Computer Scientists</title>
        <description>&lt;p&gt;A memorizable description of git commands.&lt;/p&gt;

&lt;p&gt;If you ever worked with a version-control system, 
you will probably get nervous about any file not under the shelter
of the perpetual possibility to undo changes.
I have been using &lt;em&gt;git&lt;/em&gt; for quite some time now,
mostly for my solitary work (dissertation, papers, some code).
Since it is decentralized, it is easy to backup, 
and I am quite happy with it.&lt;/p&gt;

&lt;p&gt;One feature of git, however, I carefully avoided is &lt;em&gt;branching.&lt;/em&gt;
Of course, I tried it once when I read the git manual,
and I can work with existing branches, but I always felt a bit 
insecure of what the commands I typed were really doing.&lt;/p&gt;

&lt;p&gt;I have some hope that this will change now.
There is a nice post titled
&lt;a href=&quot;http://eagain.net/articles/git-for-computer-scientists/&quot;&gt;&lt;em&gt;Git for computer scientists&lt;/em&gt;&lt;/a&gt;
that explains concisely and
(for me) memorizably how git branches work:
namely, in terms of the underlying data structures.
I can only recommend investing 15 calm minutes in reading the article.&lt;/p&gt;

&lt;p&gt;Unfortunately, the article stops short when it comes to the 
meaning of git’s various commands.
I’m missing a concise specification in terms of git’s data structures,
so I’ll start my own here.
(I do not attempt to make it comprehensive, but rather memorizably concise).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch &amp;lt;name&amp;gt;&lt;/code&gt;&lt;br /&gt;
Create a new named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ref&lt;/code&gt; pointing at the commit currently checked out in working area.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A thorough understanding of (an abstract view of) the inner workings
makes me feel comfortable to make more use of one of git’s 
most celebrated features.&lt;/p&gt;

</description>
        <pubDate>Mon, 27 Jun 2016 00:00:00 +0100</pubDate>
        <link>https://www.wild-inter.net/posts/git-for-computer-scientists</link>
        <guid isPermaLink="true">https://www.wild-inter.net/posts/git-for-computer-scientists</guid>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Pseudocode in Jekyll</title>
        <description>&lt;p&gt;There is a Jekyll plugin to typeset pseudocode.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/wkm/jekyll-pseudo&quot;&gt;jekyll-pseudo&lt;/a&gt;.
It looks quite simple; unless I find a better alternative, I’ll try this
out next time and update this post afterwards.&lt;/p&gt;

</description>
        <pubDate>Fri, 20 May 2016 00:00:00 +0100</pubDate>
        <link>https://www.wild-inter.net/posts/pseudocode-in-jekyll</link>
        <guid isPermaLink="true">https://www.wild-inter.net/posts/pseudocode-in-jekyll</guid>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>MathJax in Jekyll</title>
        <description>&lt;p&gt;I describe how I include MathJax using Euler fonts.&lt;/p&gt;

&lt;script type=&quot;text/x-mathjax-config&quot;&gt;
	var font = &quot;Neo-Euler&quot;;
	MathJax.Hub.Config({
		tex2jax: {
			inlineMath: [['$','$']],
			displayMath: [['\\[','\\]']],
			processEscapes: true,
		},
		&quot;SVG&quot;:{ 
			font:font
		},
		&quot;HTML-CSS&quot;: {
			webFont: font,
			imageFont: font,
			preferredFont: font,
			availableFonts: [],
			scale: 85,
			mtextFontInherit: true
		}
	});
&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;non-standard-fonts&quot;&gt;Non-Standard Fonts&lt;/h1&gt;

&lt;p&gt;I follow the instructions in &lt;a href=&quot;http://gastonsanchez.com/opinion/2014/02/16/Mathjax-with-jekyll/&quot;&gt;this blog&lt;/a&gt;
on getting MathJax support in Markdown using Jekyll.
However, to better match the Palatino text font,
I use the &lt;em&gt;Euler Math&lt;/em&gt; font, which MathJax can be configured to use.
A nice place to try out the different available fonts is
&lt;a href=&quot;http://checkmyworking.com/misc/MathJax-play-area/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I decided to include the mathjax scripts only on those pages,
where it is actually used, so I created a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_include&lt;/code&gt; file
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mathjax.html&lt;/code&gt; with the usual MathJax contents:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;script type=&quot;text/x-mathjax-config&quot;&amp;gt;
var font = &quot;Neo-Euler&quot;;
MathJax.Hub.Config({
	tex2jax: {
		inlineMath: [['$','$']],
		displayMath: [['\\[','\\]']],
		processEscapes: true,
	},
	&quot;SVG&quot;:{ 
		font:font
	},
	&quot;HTML-CSS&quot;: {
		webFont: font,
		imageFont: font,
		preferredFont: font,
		availableFonts: [],
		scale: 85,
		mtextFontInherit: true
	}
}); &amp;lt;/script&amp;gt; &amp;lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By starting a new page with  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{% include mathjax.html %}&lt;/code&gt;, 
MathJax support is enabled—and it works out of the box: $\sqrt x$.&lt;/p&gt;

&lt;div class=&quot;digression&quot;&gt;
&lt;div class=&quot;digression-title&quot;&gt;Showing liquid tags.&lt;/div&gt;
To show liquid tags literally (i.e. not expanded by jekyll),
you can use the raw-tag of liquid.
&lt;/div&gt;

&lt;p&gt;By default, double dollars are used to delimit math,
but it can also be configured
to work with single dollars $\sum_{i=1}^n i^2 = \frac{n(n+1)(2n+1)}{6}$.&lt;/p&gt;

&lt;h1 id=&quot;using-macros&quot;&gt;Using macros&lt;/h1&gt;

&lt;p&gt;Using macros with MathJax is possible, but the support is limited;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\newcommand&lt;/code&gt; with optional parameters does not seem to work.
In Jekyll, one runs into trouble with opening braces followed by % parts
since these are interpreted as
liquid tag opening.&lt;/p&gt;

&lt;p&gt;However, basic macros do work. One can define a macro in one part
and use it later on that page.
It is best practice to put definitions in a separate &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display:none&lt;/code&gt;
div to not influence the layout.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;div style=&quot;display:none&quot;&amp;gt;
$
\newcommand\testmacro[2]{\mathbf{F\alpha}(#1)^{#2}}
$
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div style=&quot;display:none&quot;&gt;
$
\newcommand\testmacro[2]{\mathbf{F\alpha}(#1)^{#2}}
$
&lt;/div&gt;

&lt;p&gt;Then we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$\testmacro{17}{\text{hallo}}$&lt;/code&gt; to get
$\testmacro{17}{\text{hallo}}$.&lt;/p&gt;

&lt;h1 id=&quot;font-trouble&quot;&gt;Font Trouble&lt;/h1&gt;

&lt;p&gt;Not all fonts work as they should with Euler math;
switching to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\mathrm&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\mathit&lt;/code&gt; does not work:
$\mathrm{mathrm}$ and $\mathit{mathit}$ both use the ordinary Euler
font intended for single-letter variables—this is ugly.&lt;/p&gt;

&lt;p&gt;With the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mtextFontInherit&lt;/code&gt; inherit option, we can at least use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\text&lt;/code&gt; to get multi-letter variables in roman font
$x+2\cdot\text{slope}$, but they do not seem to inherit further
attributes like &lt;em&gt;italic text $\text{math}$.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&quot;further-resources&quot;&gt;Further Resources&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;A &lt;a href=&quot;http://www.onemathematicalcat.org/MathJaxDocumentation/TeXSyntax.htm&quot;&gt;comprehensive list&lt;/a&gt;
of commands/macros that MathJax knows.&lt;/li&gt;
  &lt;li&gt;A few common &lt;a href=&quot;https://www.tuhh.de/MathJax/test/examples.html&quot;&gt;usage examples&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 20 May 2016 00:00:00 +0100</pubDate>
        <link>https://www.wild-inter.net/posts/mathjax-in-jekyll</link>
        <guid isPermaLink="true">https://www.wild-inter.net/posts/mathjax-in-jekyll</guid>
        
        
        <category>web</category>
        
        <category>latex</category>
        
      </item>
    
  </channel>
</rss>
